// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/logic/logic.proto

/*
Package logic is a generated protocol buffer package.

It is generated from these files:
	proto/logic/logic.proto

It has these top-level messages:
	Products
	Product
	Users
	Id
	ProductType
*/
package logic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import general "github.com/LarsMiren/accountancy/proto/general"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Products struct {
	Data []*Product `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *Products) Reset()                    { *m = Products{} }
func (m *Products) String() string            { return proto.CompactTextString(m) }
func (*Products) ProtoMessage()               {}
func (*Products) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Products) GetData() []*Product {
	if m != nil {
		return m.Data
	}
	return nil
}

type Product struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image       []byte `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	SupplierId  string `protobuf:"bytes,5,opt,name=supplierId" json:"supplierId,omitempty"`
	Type        string `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Product) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Product) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Product) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Product) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Product) GetSupplierId() string {
	if m != nil {
		return m.SupplierId
	}
	return ""
}

func (m *Product) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type Users struct {
	Amount int32           `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
	Data   []*general.User `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Users) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Users) GetData() []*general.User {
	if m != nil {
		return m.Data
	}
	return nil
}

type Id struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ProductType struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *ProductType) Reset()                    { *m = ProductType{} }
func (m *ProductType) String() string            { return proto.CompactTextString(m) }
func (*ProductType) ProtoMessage()               {}
func (*ProductType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProductType) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*Products)(nil), "logic.Products")
	proto.RegisterType((*Product)(nil), "logic.Product")
	proto.RegisterType((*Users)(nil), "logic.Users")
	proto.RegisterType((*Id)(nil), "logic.Id")
	proto.RegisterType((*ProductType)(nil), "logic.ProductType")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Logic service

type LogicClient interface {
	GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*general.User, error)
	GetProductById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Product, error)
	GetAllUsers(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Users, error)
	GetProductsByType(ctx context.Context, in *ProductType, opts ...grpc.CallOption) (*Products, error)
	GetProductsByUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Products, error)
	UpdateUser(ctx context.Context, in *general.User, opts ...grpc.CallOption) (*general.Confirmation, error)
	UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*general.Confirmation, error)
	CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*general.Confirmation, error)
	DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*general.Confirmation, error)
	DeleteProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*general.Confirmation, error)
	Subscribe(ctx context.Context, in *Id, opts ...grpc.CallOption) (*general.Confirmation, error)
}

type logicClient struct {
	cc *grpc.ClientConn
}

func NewLogicClient(cc *grpc.ClientConn) LogicClient {
	return &logicClient{cc}
}

func (c *logicClient) GetUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*general.User, error) {
	out := new(general.User)
	err := grpc.Invoke(ctx, "/logic.logic/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GetProductById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := grpc.Invoke(ctx, "/logic.logic/GetProductById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GetAllUsers(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := grpc.Invoke(ctx, "/logic.logic/GetAllUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GetProductsByType(ctx context.Context, in *ProductType, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := grpc.Invoke(ctx, "/logic.logic/GetProductsByType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) GetProductsByUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Products, error) {
	out := new(Products)
	err := grpc.Invoke(ctx, "/logic.logic/GetProductsByUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) UpdateUser(ctx context.Context, in *general.User, opts ...grpc.CallOption) (*general.Confirmation, error) {
	out := new(general.Confirmation)
	err := grpc.Invoke(ctx, "/logic.logic/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) UpdateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*general.Confirmation, error) {
	out := new(general.Confirmation)
	err := grpc.Invoke(ctx, "/logic.logic/UpdateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) CreateProduct(ctx context.Context, in *Product, opts ...grpc.CallOption) (*general.Confirmation, error) {
	out := new(general.Confirmation)
	err := grpc.Invoke(ctx, "/logic.logic/CreateProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) DeleteUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*general.Confirmation, error) {
	out := new(general.Confirmation)
	err := grpc.Invoke(ctx, "/logic.logic/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) DeleteProduct(ctx context.Context, in *Id, opts ...grpc.CallOption) (*general.Confirmation, error) {
	out := new(general.Confirmation)
	err := grpc.Invoke(ctx, "/logic.logic/DeleteProduct", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logicClient) Subscribe(ctx context.Context, in *Id, opts ...grpc.CallOption) (*general.Confirmation, error) {
	out := new(general.Confirmation)
	err := grpc.Invoke(ctx, "/logic.logic/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Logic service

type LogicServer interface {
	GetUser(context.Context, *Id) (*general.User, error)
	GetProductById(context.Context, *Id) (*Product, error)
	GetAllUsers(context.Context, *google_protobuf1.Empty) (*Users, error)
	GetProductsByType(context.Context, *ProductType) (*Products, error)
	GetProductsByUser(context.Context, *Id) (*Products, error)
	UpdateUser(context.Context, *general.User) (*general.Confirmation, error)
	UpdateProduct(context.Context, *Product) (*general.Confirmation, error)
	CreateProduct(context.Context, *Product) (*general.Confirmation, error)
	DeleteUser(context.Context, *Id) (*general.Confirmation, error)
	DeleteProduct(context.Context, *Id) (*general.Confirmation, error)
	Subscribe(context.Context, *Id) (*general.Confirmation, error)
}

func RegisterLogicServer(s *grpc.Server, srv LogicServer) {
	s.RegisterService(&_Logic_serviceDesc, srv)
}

func _Logic_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GetUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/GetProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GetProductById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GetAllUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GetAllUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/GetAllUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GetAllUsers(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GetProductsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GetProductsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/GetProductsByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GetProductsByType(ctx, req.(*ProductType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_GetProductsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).GetProductsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/GetProductsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).GetProductsByUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(general.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).UpdateUser(ctx, req.(*general.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/UpdateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).UpdateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).CreateProduct(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).DeleteUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).DeleteProduct(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logic_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogicServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logic.logic/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogicServer).Subscribe(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _Logic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logic.logic",
	HandlerType: (*LogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _Logic_GetUser_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _Logic_GetProductById_Handler,
		},
		{
			MethodName: "GetAllUsers",
			Handler:    _Logic_GetAllUsers_Handler,
		},
		{
			MethodName: "GetProductsByType",
			Handler:    _Logic_GetProductsByType_Handler,
		},
		{
			MethodName: "GetProductsByUser",
			Handler:    _Logic_GetProductsByUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Logic_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _Logic_UpdateProduct_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Logic_CreateProduct_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Logic_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _Logic_DeleteProduct_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Logic_Subscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logic/logic.proto",
}

func init() { proto.RegisterFile("proto/logic/logic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0xd4, 0x3c,
	0x14, 0x86, 0x95, 0xb4, 0x33, 0x6d, 0xcf, 0x34, 0x53, 0xd5, 0xed, 0x7c, 0x8d, 0xd2, 0x0f, 0x34,
	0xcd, 0xaa, 0xea, 0x22, 0x96, 0xca, 0x02, 0x09, 0x89, 0x05, 0x29, 0x50, 0x46, 0x14, 0xa9, 0x1a,
	0xa8, 0x90, 0xd8, 0x79, 0x12, 0x37, 0x58, 0xca, 0x9f, 0x62, 0x67, 0x11, 0x55, 0xdd, 0x70, 0x0b,
	0xac, 0xb8, 0x0b, 0xee, 0x85, 0x5b, 0xe0, 0x42, 0x90, 0x7f, 0x32, 0x93, 0x0c, 0xaa, 0x80, 0x4d,
	0x14, 0x1f, 0xfb, 0x3c, 0xe7, 0xbc, 0xaf, 0x8f, 0xe1, 0xa8, 0xac, 0x0a, 0x51, 0xe0, 0xb4, 0x48,
	0x58, 0xa4, 0xbf, 0x81, 0x8a, 0xa0, 0x81, 0x5a, 0x78, 0xff, 0x27, 0x45, 0x91, 0xa4, 0x14, 0x93,
	0x92, 0x61, 0x92, 0xe7, 0x85, 0x20, 0x82, 0x15, 0x39, 0xd7, 0x87, 0xbc, 0x63, 0xb3, 0xab, 0x56,
	0x8b, 0xfa, 0x16, 0xd3, 0xac, 0x14, 0x8d, 0xd9, 0x7c, 0x9e, 0x30, 0xf1, 0xb9, 0x5e, 0x04, 0x51,
	0x91, 0xe1, 0x2b, 0x52, 0xf1, 0x77, 0xac, 0xa2, 0x39, 0x26, 0x51, 0x54, 0xd4, 0xb9, 0x20, 0x79,
	0xd4, 0xe8, 0x34, 0x9c, 0xd0, 0x9c, 0x56, 0x24, 0xc5, 0x19, 0xe5, 0x9c, 0x24, 0xd4, 0xb0, 0xfd,
	0x00, 0xb6, 0xaf, 0xab, 0x22, 0xae, 0x23, 0xc1, 0x91, 0x0f, 0x9b, 0x31, 0x11, 0xc4, 0xb5, 0xa6,
	0x1b, 0xa7, 0xa3, 0xf3, 0x71, 0xa0, 0x1b, 0x35, 0xdb, 0x73, 0xb5, 0xe7, 0x7f, 0xb3, 0x60, 0xcb,
	0x44, 0xd0, 0x18, 0x6c, 0x16, 0xbb, 0xd6, 0xd4, 0x3a, 0xdd, 0x99, 0xdb, 0x2c, 0x46, 0x08, 0x36,
	0x73, 0x92, 0x51, 0xd7, 0x56, 0x11, 0xf5, 0x8f, 0x0e, 0x61, 0xc0, 0x32, 0x92, 0x50, 0x77, 0x63,
	0x6a, 0x9d, 0xee, 0xce, 0xf5, 0x02, 0x4d, 0x61, 0x14, 0x53, 0x1e, 0x55, 0xac, 0x94, 0x3a, 0xdd,
	0x4d, 0x95, 0xd0, 0x0d, 0xa1, 0xc7, 0x00, 0xbc, 0x2e, 0xcb, 0x94, 0xd1, 0x6a, 0x16, 0xbb, 0x03,
	0x75, 0xa0, 0x13, 0x91, 0xb5, 0x44, 0x53, 0x52, 0x77, 0xa8, 0x6b, 0xc9, 0x7f, 0x3f, 0x84, 0xc1,
	0x0d, 0xa7, 0x15, 0x47, 0xff, 0xc1, 0x90, 0x64, 0x52, 0xbf, 0x6a, 0x6e, 0x30, 0x37, 0x2b, 0x74,
	0x62, 0x04, 0xda, 0x4a, 0xa0, 0x13, 0x18, 0x4f, 0x02, 0x99, 0x65, 0xf4, 0x1d, 0x82, 0x3d, 0x8b,
	0xd7, 0x95, 0xf9, 0x27, 0x30, 0x32, 0xa2, 0x3f, 0x34, 0x25, 0x5d, 0x16, 0xb7, 0x56, 0xc5, 0xcf,
	0xbf, 0x0f, 0x41, 0x5f, 0x26, 0x7a, 0x0a, 0x5b, 0x97, 0x54, 0x48, 0x26, 0xda, 0x31, 0x1e, 0xce,
	0x62, 0xaf, 0x5f, 0xcd, 0x47, 0x5f, 0x7e, 0xfc, 0xfc, 0x6a, 0xef, 0x22, 0xc0, 0x35, 0xa7, 0x15,
	0xbe, 0x63, 0xf1, 0x3d, 0x0a, 0x61, 0x7c, 0x49, 0x85, 0x29, 0x14, 0x36, 0xb3, 0xb8, 0x9b, 0xbf,
	0x76, 0x1d, 0xfe, 0x44, 0x01, 0xf6, 0x90, 0x23, 0xef, 0x57, 0x46, 0x34, 0xe3, 0x02, 0x46, 0x97,
	0x54, 0xbc, 0x48, 0x53, 0xe3, 0x44, 0xa0, 0x67, 0x27, 0x68, 0x67, 0x27, 0x78, 0x25, 0x67, 0xc7,
	0xdb, 0x35, 0x34, 0x75, 0xca, 0x1f, 0x2b, 0xd6, 0x36, 0x1a, 0xaa, 0x66, 0x38, 0xfa, 0x08, 0xfb,
	0xab, 0x46, 0x78, 0xd8, 0x68, 0xd1, 0xfd, 0x06, 0x64, 0xcc, 0xdb, 0xeb, 0xc7, 0xb8, 0xff, 0x48,
	0x91, 0x8e, 0xd0, 0xa4, 0xed, 0x8a, 0x63, 0xe9, 0x0e, 0xbe, 0x93, 0xdf, 0x7b, 0x74, 0xb5, 0x06,
	0x5e, 0x37, 0xe9, 0x37, 0xde, 0xb1, 0xe2, 0x4d, 0xd0, 0xc1, 0x8a, 0xb7, 0xf2, 0x6b, 0x06, 0x70,
	0x53, 0xc6, 0x44, 0x50, 0x85, 0xe9, 0x1b, 0xec, 0x4d, 0x96, 0xcb, 0x8b, 0x22, 0xbf, 0x65, 0x55,
	0xa6, 0x9e, 0x54, 0x6b, 0x9b, 0xd7, 0xf1, 0xfd, 0x99, 0x75, 0x86, 0xae, 0xc1, 0xd1, 0xa8, 0xe5,
	0x6c, 0xf7, 0x3b, 0x79, 0x08, 0xe7, 0x2a, 0x1c, 0xf2, 0xfa, 0xb7, 0x20, 0x89, 0x6f, 0xc1, 0xb9,
	0xa8, 0xe8, 0xbf, 0x13, 0x0f, 0x14, 0xd1, 0xf1, 0xb7, 0x5b, 0xa2, 0x84, 0x85, 0x00, 0x2f, 0x69,
	0x4a, 0x8d, 0xd2, 0x8e, 0x61, 0x0f, 0x40, 0xcc, 0x74, 0x9d, 0x75, 0xa7, 0xeb, 0x0d, 0x38, 0x9a,
	0xd1, 0x36, 0xf4, 0x67, 0x8c, 0x31, 0xeb, 0x6c, 0x6d, 0xc6, 0x5e, 0xc3, 0xce, 0xfb, 0x7a, 0x21,
	0xdf, 0xea, 0x82, 0xfe, 0x05, 0xe5, 0x48, 0x51, 0xf6, 0xfd, 0x3d, 0xcc, 0xdb, 0x2c, 0xc5, 0x09,
	0xb7, 0x3e, 0xe9, 0x17, 0xb3, 0x18, 0xaa, 0xe9, 0x7c, 0xf2, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x03,
	0x9a, 0x34, 0xdf, 0x27, 0x05, 0x00, 0x00,
}
